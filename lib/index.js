// Generated by CoffeeScript 1.6.2
var fs, parseFile, watchFile;

fs = require('fs');

/**
 *
 * Express helper
 *
 * @param {Object} options
 * @param {String} options.map Config filename, default 'distribution.json'
 * @param {Boolean} options.watch Watch changes in config file, default 'false' in production environment
 * @param {Function} options.log Function for logging, set to 'false' to desable logging
 * @param {Function} options.error Function for logging errors, set to 'false' to desable logging
 * @throws {Error|SyntaxError} Error reading file or parsing content
 *
*/


module.exports = function(options) {
  var assets, _ref, _ref1, _ref2, _ref3;

  if (options == null) {
    options = {};
  }
  if ((_ref = options.watch) == null) {
    options.watch = process.env.NODE_ENV !== 'production';
  }
  if ((_ref1 = options.map) == null) {
    options.map = 'distribution.json';
  }
  if ((_ref2 = options.log) == null) {
    options.log = console.log;
  }
  if ((_ref3 = options.error) == null) {
    options.error = console.error;
  }
  assets = parseFile(options.map);
  if (options.watch === true) {
    watchFile(options.map, function() {
      var err;

      try {
        assets = parseFile(options.map);
        if (options.log != null) {
          return options.log("assets reloaded from file '" + options.map + "'");
        }
      } catch (_error) {
        err = _error;
        if (options.error != null) {
          return options.error("error parsing file '" + options.map + "'");
        }
      }
    });
  }
  return function(key) {
    var asset;

    asset = assets[key];
    if (asset == null) {
      if (options.error != null) {
        options.error("asset '" + key + "' not found");
      }
    }
    return asset || '';
  };
};

/**
 *
 * Read file and parse content
 *
 * @name parseFile
 *
 * @param {String} filename
 * @throws {Error|SyntaxError} reading file or parsing content
 *
*/


parseFile = function(filename) {
  return JSON.parse(fs.readFileSync(filename, 'utf8'));
};

/**
 *
 * Watch file changes
 *
 * @name watchFile
 *
 * @param {String} filename
 * @param {Function} cb
 * @throws {Error} watching file
 *
*/


watchFile = function(filename, cb) {
  var timeout;

  timeout = null;
  return fs.watch(filename, function(event) {
    if (event === 'change') {
      if (timeout != null) {
        clearTimeout(timeout);
      }
      return timeout = setTimeout(function() {
        timeout = null;
        return cb();
      }, 5);
    }
  });
};
